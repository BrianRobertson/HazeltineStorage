@model HazeltineStorage.Models.Payment

@{
    ViewBag.Title = "CreateForThisCustomer";
}

<h2>Create For This Customer</h2>
@* Direct this form to the regular Create Method & PaymentsController: *@
@using (Html.BeginForm("Create", "Payments")) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Payment</h4>
        <hr /> 
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @*@Html.LabelFor(model => model.CustomerId, "Customer Last Name", htmlAttributes: new { @class = "control-label col-md-2" })*@
            @Html.LabelFor(model => model.CustomerId, "CustomerId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @* I should consider using a view model for this. 
                    I am getting the following error when trying to save the newly created payment for this customer: *@
                @* {"The INSERT statement conflicted with the FOREIGN KEY constraint \"FK_dbo.Payments_dbo.Customers_CustomerId\". The conflict occurred in database \"aspnet-HazeltineStorage-20170522082208\", table \"dbo.Customers\", column 'Id'.\r\nThe statement has been terminated."} *@

                @*@Html.DisplayFor(model => model.Customer.FirstName)
                @Html.DisplayFor(model => model.Customer.LastName)*@

                @Html.DisplayFor(model => model.CustomerId)

                @*@Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReceivedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReceivedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReceivedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentTypeId, "Payment Type", htmlAttributes: new { @class = "control-label col-md-2" })
            @*@Html.LabelFor(model => model.PaymentTypeId, "PaymentTypeId", htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.DropDownList("PaymentTypeId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PaymentTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AmountReceived, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AmountReceived, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AmountReceived, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DepositDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DepositDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DepositDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
